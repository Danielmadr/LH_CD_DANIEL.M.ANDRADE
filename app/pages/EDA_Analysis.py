
import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px


def carregar_dados_db(db_path):
    conn = sqlite3.connect(db_path)
    df = pd.read_sql_query("SELECT * FROM movies", conn)
    conn.close()
    return df

def plot_correlation_matrix(df: pd.DataFrame):
    # Selecionar apenas colunas num√©ricas relevantes
    colunas_relevantes = [
        'Released_Year', 'Runtime', 'IMDB_Rating', 'Meta_score', 'No_of_Votes', 'Gross'
    ]
    df_corr = df[colunas_relevantes].copy()
    corr = df_corr.corr()
    # Melhorar nomes das colunas para o gr√°fico
    corr.index.name = 'Vari√°vel'
    corr.columns.name = 'Vari√°vel'
    fig = px.imshow(
        corr,
        text_auto='.2f',
        color_continuous_scale='RdBu_r',
        title="Matriz de Correla√ß√£o",
        labels=dict(color="Correla√ß√£o"),
        x=corr.columns,
        y=corr.index
    )
    fig.update_layout(
        title_x=0.5,
        width=800,
        height=600
    )
    st.plotly_chart(fig, use_container_width=True)

    # Extrair correla√ß√µes mais altas (excluindo diagonal)
    st.subheader("Principais Correla√ß√µes")
    corr_pairs = []
    for i in range(len(corr.columns)):
        for j in range(i+1, len(corr.columns)):
            var1 = corr.columns[i]
            var2 = corr.columns[j]
            corr_val = corr.iloc[i, j]
            if not pd.isna(corr_val):
                corr_pairs.append({
                    'Vari√°vel 1': var1,
                    'Vari√°vel 2': var2,
                    'For√ßa': abs(corr_val)
                })
    if corr_pairs:
        corr_df = pd.DataFrame(corr_pairs).sort_values('For√ßa', ascending=False).reset_index(drop=True)
        st.dataframe(corr_df.head(10))
    return fig

def plot_top_recommendations(df: pd.DataFrame):
    # Crit√©rios: Alta nota IMDB (>=8.0) + Muitos votos (acima do percentil 70) + G√™neros populares
    st.markdown(
        """
        **Crit√©rios para recomenda√ß√£o:**
        - Nota IMDB ‚â• 8.0
        - N√∫mero de votos acima do percentil 70
        - G√™neros mais frequentes entre os melhores
        
        """
    )
    high_rated = df[df['IMDB_Rating'] >= 8.0]
    popular = high_rated[high_rated['No_of_Votes'] >= high_rated['No_of_Votes'].quantile(0.7)]

    # Gr√°fico 1: Distribui√ß√£o de Rating vs Votos (apenas filmes populares)
    fig1 = px.scatter(
        popular,
        x='No_of_Votes',
        y='IMDB_Rating',
        color='Genre',
        size='IMDB_Rating',
        hover_data=['Series_Title', 'Released_Year'],
        title='Rating vs Popularidade (Filmes Populares)',
        subtitle= "Nota: Um filme √© considerado popular nesta an√°lise se possui nota IMDB igual ou superior a 8.0 e est√° entre os 30% com maior n√∫mero de votos.",
        labels={'No_of_Votes': 'N√∫mero de Votos', 'IMDB_Rating': 'Rating IMDB'}
    )
    fig1.update_xaxes(type='log')
    st.plotly_chart(fig1, use_container_width=True)

    # Gr√°fico 2: Distribui√ß√£o por g√™nero dos filmes bem avaliados
    genre_counts = popular['Genre'].value_counts().head(10)
    fig2 = px.bar(
        x=genre_counts.values,
        y=genre_counts.index,
        orientation='h',
        title='G√™neros Mais Populares (Rating ‚â• 8.0)',
        labels={'x': 'N√∫mero de Filmes', 'y': 'G√™nero'}
    )
    fig2.update_layout(yaxis={'categoryorder': 'total ascending'})
    st.plotly_chart(fig2, use_container_width=True)

    # Top 10 filmes recomendados (desempate por votos)
    top_recommendations = popular.sort_values(
        ['IMDB_Rating', 'No_of_Votes'], ascending=[False, False]
    ).head(10)[['Series_Title', 'IMDB_Rating', 'No_of_Votes', 'Genre', 'Released_Year']]

    st.subheader("üèÜ Top 10 Filmes Recomendados")
    st.dataframe(top_recommendations)

    return top_recommendations

def page_analysis():
    st.title("An√°lise Explorat√≥ria de Dados (EDA)")
    
    db_path = "data/production.db"
    try:
        df = carregar_dados_db(db_path)
    except Exception as e:
        st.error(f"Erro ao carregar dados do banco: {e}")
        return

    # Criar abas para diferentes tipos de an√°lise
    tab1, tab2, tab3, tab4 = st.tabs(["üîó Correla√ß√µes Gerais", "üèÜ Recomenda√ß√µes", "üéØ An√°lise de Faturamento", "üìä An√°lise das Vis√µes Gerais dos Filmes"])

    with tab1:
        st.subheader("Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas")
        st.markdown("Veja como as principais vari√°veis num√©ricas dos filmes se relacionam entre si. A matriz de correla√ß√£o abaixo destaca as rela√ß√µes mais fortes, tanto positivas quanto negativas, que podem influenciar o desempenho e a recep√ß√£o dos filmes.")
        plot_correlation_matrix(df)
    
    with tab2:
        st.subheader("Top 10 Filmes Recomendados (Alta Nota e Popularidade)")
        st.markdown("Confira os filmes mais recomendados, considerando tanto a avalia√ß√£o do p√∫blico quanto a popularidade. Os gr√°ficos a seguir mostram a distribui√ß√£o dos filmes populares e os g√™neros mais frequentes entre eles.")
        plot_top_recommendations(df)
    
    with tab3:
        st.subheader("An√°lise de Faturamento")
        st.markdown("Nesta se√ß√£o, vamos explorar os fatores que influenciam o faturamento dos filmes.")
    # Nova an√°lise focada em faturamento
    # analise_fatores_faturamento(df)

    with tab4:
        st.subheader("An√°lise das Vis√µes Gerais dos Filmes")
        st.markdown("Nesta se√ß√£o, vamos explorar as vis√µes gerais dos filmes, incluindo aspectos como dire√ß√£o, elenco e produ√ß√£o.")

if __name__ == "__main__":
    page_analysis()